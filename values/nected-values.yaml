# default username / password to be used post deployment for login
NECTED_UI_USER_NAME: &uiUserName dev@nected.ai
NECTED_UI_USER_PASSWORD: &uiUserPassword devPass123

# configurations for Postgres / Redis / ElasticSearch
# default values is set according to datastore chart
NECTED_PG_HOST: &pgHost datastore-postgresql
NECTED_PG_DATABASE: &pgDatabase nected
NECTED_PG_USER: &pgUser nected
NECTED_PG_PASSWORD: &pgPassword psqlPass123
NECTED_PG_PORT: &pgPort "5432"
NECTED_PG_SSL_MODE: &pgSslMode disable

NECTED_REDIS_TLS_ENABLED: &redisTlsEnabled "false"
NECTED_REDIS_INSECURE_TLS: &redisInsecureTls "true"
NECTED_REDIS_HOST_PORT: &redisHostPort datastore-redis-master:6379
NECTED_REDIS_HOST: &redisHost datastore-redis-master
NECTED_REDIS_PORT: &redisPort "6379"
NECTED_REDIS_USERNAME: &redisUser ""
NECTED_REDIS_PASSWORD: &redisPassword ""

# false if audit log not required, no elasticSearch
NECTED_ELASTIC_ENABLED: &elasticEnabled "true"
 # opensearch: OpenSearch, managed: ElasticSearch
NECTED_ELASTIC_PROVIDER: &elasticProvider managed
NECTED_ELASTIC_HOSTS: &elasticHost http://elasticsearch-master:9200
NECTED_ELASTIC_INSECURE_TLS: &elasticInsecureTls "true"
NECTED_ELASTIC_API_KEY: &elasticAPiKey ""
NECTED_ELASTIC_USER: &elasticUser elastic
NECTED_ELASTIC_PASSWORD: &elasticPassword esPass123

# to encrypt credentials and global variables before saving in db: create encryption key
# openssl genrsa -f4 -out encryption-at-rest 4096
# kubectl create secret generic encryption-at-rest-secret --from-file encryption-at-rest
#
existingSecretMap: &commonSecretMap {}
# use below existingSecretMap value
# existingSecretMap: &commonSecretMap
#   - name: ENCRYPTKEY_EAR_1
#     valueFrom:
#       secretKeyRef:
#         name: encryption-at-rest-secret
#         key: encryption-at-rest

# konark chart values to be updated
konark:
  enabled: true
  replicaCount: 1
  envVars:
    VITE_API_HOST: <<scheme>>://<<backend-domain>>
    VITE_GRAPHQL_URL: <<scheme>>://<<backend-domain>>/graphql/query
    VITE_NGINX_SERVER_NAME: <<ui-domain>>

  resources:
    requests:
      cpu: "350m"
      memory: "512Mi"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# nalanda chart values to be updated
nalanda:
  enabled: true
  replicaCount: 1
  existingSecretMap: *commonSecretMap
  envVars:
    ALLOWED_CORS_ORIGIN: <<scheme>>://<<backend-domain>>,<<scheme>>://<<ui-domain>>
    ALLOWED_HOSTS: <<backend-domain>>
    BACKEND_URL: <<scheme>>://<<backend-domain>>

    # Database Config
    MASTER_DB_NAME: *pgDatabase
    MASTER_DB_USER: *pgUser
    MASTER_DB_PASSWORD: *pgPassword
    MASTER_DB_HOST: *pgHost
    MASTER_DB_PORT: *pgPort
    MASTER_SSL_MODE: *pgSslMode

    # Redis Config
    REDIS_TLS_ENABLED: *redisTlsEnabled
    REDIS_INSECURE_TLS: *redisInsecureTls
    REDIS_HOST: *redisHost
    REDIS_PORT: *redisPort
    REDIS_DATABASE: "0"
    REDIS_USERNAME: *redisUser
    REDIS_PASSWORD: *redisPassword

    VIDHAAN_REDIS_TLS_ENABLED: *redisTlsEnabled
    VIDHAAN_REDIS_INSECURE_TLS: *redisInsecureTls
    VIDHAAN_REDIS_HOST: *redisHost
    VIDHAAN_REDIS_PORT: *redisPort
    VIDHAAN_REDIS_DATABASE: "1"
    VIDHAAN_REDIS_USERNAME: *redisUser
    VIDHAAN_REDIS_PASSWORD: *redisPassword

    # ElasticSearch Config
    ELASTIC_PROVIDER: *elasticProvider
    ELASTIC_ENABLED: *elasticEnabled
    ELASTIC_HOSTS: *elasticHost
    ELASTIC_API_KEY: *elasticAPiKey
    ELASTIC_INSECURE_TLS: *elasticInsecureTls
    ELASTIC_USER: *elasticUser
    ELASTIC_PASSWORD: *elasticPassword

     # Email Config
    SEND_EMAIL: "false"
    # ses / smtp
    EMAIL_PROVIDER: smtp
    # Email provider: ses
    AWS_ACCESS_KEY: ""
    AWS_SECRET_KEY: ""
    AWS_REGION: ""
    #Email Provider smtp
    SENDER_EMAIL: ""
    SENDER_NAME: ""
    EMAIL_INSECURE_TLS: ""
    EMAIL_HOST: ""
    EMAIL_PORT: ""
    EMAIL_USERNAME: ""
    EMAIL_PASSWORD: ""

    # Konark Urls
    ASSETS_BASE_URL: <<scheme>>://<<ui-domain>>/assets/konark
    KONARK_BASE_URL: <<scheme>>://<<ui-domain>>

    # comma separated email domains to allow signup from
    SIGNUP_DOMAINS: ""

    # default user created on setup
    NECTED_USER_EMAIL: *uiUserName
    NECTED_USER_PASSWORD: *uiUserPassword

    # default vidhaan settings
    DEFAULT_VIDHAAN_SCHEME: <<scheme>>
    DEFAULT_VIDHAAN_DOMAIN: <<router-domain>>
    # k8s cluster gw ip
    DEFAULT_VIDHAAN_WHITELISTED_IPS: ""

  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# vidhaan-executer chart to be updated
vidhaan-executer:
  enabled: true
  replicaCount: 1
  existingSecretMap: *commonSecretMap
  envVars: &vidhaanEnvVars
    # Database config
    DB_NAME: *pgDatabase
    DB_USER: *pgUser
    DB_PASSWORD: *pgPassword
    DB_HOST: *pgHost
    DB_PORT: *pgPort
    SSL_MODE: *pgSslMode

    # Redis Config
    REDIS_TLS_ENABLED: *redisTlsEnabled
    REDIS_INSECURE_TLS: *redisInsecureTls
    REDIS_HOST: *redisHostPort
    REDIS_DATABASE: "1"
    REDIS_USERNAME: *redisUser
    REDIS_PASSWORD: *redisPassword

    # ElasticSearch Config
    ELASTIC_PROVIDER: *elasticProvider
    ELASTIC_ENABLED: *elasticEnabled
    ELASTIC_INSECURE_TLS: *elasticInsecureTls
    ELASTIC_ADDRESSES: *elasticHost
    ELASTIC_API_KEY: *elasticAPiKey
    ELASTIC_USERNAME: *elasticUser
    ELASTIC_PASSWORD: *elasticPassword

    # Audit log
    AUDIT_LOG_ENABLED: *elasticEnabled

    # subdomains
    SKIP_SUBDOMAINS: <<router-domain>>

  resources:
    requests:
      cpu: "500m"
      memory: "512Mi"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# vidhaan-router chart to be updated
vidhaan-router:
  enabled: true
  replicaCount: 1
  existingSecretMap: *commonSecretMap
  envVars: *vidhaanEnvVars

  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# medha chart to be updated
medha:
  enabled: true
  replicaCount: 1

  resources:
    requests:
      cpu: "600m"
      memory: "1024Mi"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# executer-tp chart to be updated
garuda:
  enabled: false
  envVars:
    REDIS_ENABLED: "true"
    REDIS_TLS_ENABLED: *redisTlsEnabled
    REDIS_HOST: *redisHost
    REDIS_PORT: *redisPort
    REDIS_USERNAME: *redisUser
    REDIS_PASSWORD: *redisPassword
    REDIS_DB: "2"

  resources:
    requests:
      cpu: "400m"
      memory: "1024Mi"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80